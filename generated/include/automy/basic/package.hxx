
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_automy_basic_PACKAGE_HXX_
#define INCLUDE_automy_basic_PACKAGE_HXX_

#include <vnx/Type.h>

#include <automy/math/package.hxx>
#include <vnx/package.hxx>


namespace automy {
namespace basic {


class DataPacket;
class Image16;
class Image32;
class Image8;
class ImageF32;
class ImageF64;
class ImageFrame;
class ImageFrame16;
class ImageFrame32;
class ImageFrame8;
class ImageFrameF16;
class ImageFrameF32;
class ImageFrameF64;
class MultiImageFrame;
class Scalar;
class Transform3D;
class TransformPublisherBase;
class Trigger;
extern const vnx::TypeCode* const vnx_native_type_code_DataPacket; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ImageFrame; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ImageFrame_get_property; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ImageFrame_get_property_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ImageFrame_get_property_default; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ImageFrame_get_property_default_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ImageFrame16; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ImageFrame32; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ImageFrame8; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ImageFrameF16; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ImageFrameF32; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ImageFrameF64; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_MultiImageFrame; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Scalar; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Transform3D; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Transform3D_get_inverse; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Transform3D_get_inverse_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TransformPublisher; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TransformPublisher_set_transform; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TransformPublisher_set_transform_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Trigger; ///< \private

} // namespace automy
} // namespace basic


namespace vnx {

void read(TypeInput& in, ::automy::basic::DataPacket& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::Image16& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::Image32& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::Image8& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::ImageF32& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::ImageF64& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::ImageFrame& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::ImageFrame16& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::ImageFrame32& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::ImageFrame8& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::ImageFrameF16& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::ImageFrameF32& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::ImageFrameF64& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::MultiImageFrame& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::Scalar& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::Transform3D& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::TransformPublisherBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::basic::Trigger& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::automy::basic::DataPacket& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::Image16& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::Image32& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::Image8& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::ImageF32& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::ImageF64& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::ImageFrame& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::ImageFrame16& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::ImageFrame32& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::ImageFrame8& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::ImageFrameF16& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::ImageFrameF32& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::ImageFrameF64& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::MultiImageFrame& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::Scalar& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::Transform3D& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::TransformPublisherBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::basic::Trigger& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::automy::basic::DataPacket& value); ///< \private
void read(std::istream& in, ::automy::basic::Image16& value); ///< \private
void read(std::istream& in, ::automy::basic::Image32& value); ///< \private
void read(std::istream& in, ::automy::basic::Image8& value); ///< \private
void read(std::istream& in, ::automy::basic::ImageF32& value); ///< \private
void read(std::istream& in, ::automy::basic::ImageF64& value); ///< \private
void read(std::istream& in, ::automy::basic::ImageFrame& value); ///< \private
void read(std::istream& in, ::automy::basic::ImageFrame16& value); ///< \private
void read(std::istream& in, ::automy::basic::ImageFrame32& value); ///< \private
void read(std::istream& in, ::automy::basic::ImageFrame8& value); ///< \private
void read(std::istream& in, ::automy::basic::ImageFrameF16& value); ///< \private
void read(std::istream& in, ::automy::basic::ImageFrameF32& value); ///< \private
void read(std::istream& in, ::automy::basic::ImageFrameF64& value); ///< \private
void read(std::istream& in, ::automy::basic::MultiImageFrame& value); ///< \private
void read(std::istream& in, ::automy::basic::Scalar& value); ///< \private
void read(std::istream& in, ::automy::basic::Transform3D& value); ///< \private
void read(std::istream& in, ::automy::basic::TransformPublisherBase& value); ///< \private
void read(std::istream& in, ::automy::basic::Trigger& value); ///< \private

void write(std::ostream& out, const ::automy::basic::DataPacket& value); ///< \private
void write(std::ostream& out, const ::automy::basic::Image16& value); ///< \private
void write(std::ostream& out, const ::automy::basic::Image32& value); ///< \private
void write(std::ostream& out, const ::automy::basic::Image8& value); ///< \private
void write(std::ostream& out, const ::automy::basic::ImageF32& value); ///< \private
void write(std::ostream& out, const ::automy::basic::ImageF64& value); ///< \private
void write(std::ostream& out, const ::automy::basic::ImageFrame& value); ///< \private
void write(std::ostream& out, const ::automy::basic::ImageFrame16& value); ///< \private
void write(std::ostream& out, const ::automy::basic::ImageFrame32& value); ///< \private
void write(std::ostream& out, const ::automy::basic::ImageFrame8& value); ///< \private
void write(std::ostream& out, const ::automy::basic::ImageFrameF16& value); ///< \private
void write(std::ostream& out, const ::automy::basic::ImageFrameF32& value); ///< \private
void write(std::ostream& out, const ::automy::basic::ImageFrameF64& value); ///< \private
void write(std::ostream& out, const ::automy::basic::MultiImageFrame& value); ///< \private
void write(std::ostream& out, const ::automy::basic::Scalar& value); ///< \private
void write(std::ostream& out, const ::automy::basic::Transform3D& value); ///< \private
void write(std::ostream& out, const ::automy::basic::TransformPublisherBase& value); ///< \private
void write(std::ostream& out, const ::automy::basic::Trigger& value); ///< \private

void accept(Visitor& visitor, const ::automy::basic::DataPacket& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::Image16& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::Image32& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::Image8& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::ImageF32& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::ImageF64& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::ImageFrame& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::ImageFrame16& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::ImageFrame32& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::ImageFrame8& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::ImageFrameF16& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::ImageFrameF32& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::ImageFrameF64& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::MultiImageFrame& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::Scalar& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::Transform3D& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::TransformPublisherBase& value); ///< \private
void accept(Visitor& visitor, const ::automy::basic::Trigger& value); ///< \private

/// \private
template<>
struct type<::automy::basic::DataPacket> {
	void read(TypeInput& in, ::automy::basic::DataPacket& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::DataPacket& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::DataPacket& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::DataPacket& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::DataPacket& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

/// \private
template<>
struct type<::automy::basic::Image16> {
	void read(TypeInput& in, ::automy::basic::Image16& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::Image16& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::Image16& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::Image16& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::Image16& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		const std::vector<int> tmp = {22, 3, 2};
		code.insert(code.end(), tmp.begin(), tmp.end());
	}
};

/// \private
template<>
struct type<::automy::basic::Image32> {
	void read(TypeInput& in, ::automy::basic::Image32& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::Image32& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::Image32& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::Image32& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::Image32& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		const std::vector<int> tmp = {22, 3, 3};
		code.insert(code.end(), tmp.begin(), tmp.end());
	}
};

/// \private
template<>
struct type<::automy::basic::Image8> {
	void read(TypeInput& in, ::automy::basic::Image8& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::Image8& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::Image8& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::Image8& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::Image8& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		const std::vector<int> tmp = {22, 3, 1};
		code.insert(code.end(), tmp.begin(), tmp.end());
	}
};

/// \private
template<>
struct type<::automy::basic::ImageF32> {
	void read(TypeInput& in, ::automy::basic::ImageF32& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::ImageF32& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::ImageF32& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::ImageF32& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::ImageF32& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		const std::vector<int> tmp = {22, 3, 9};
		code.insert(code.end(), tmp.begin(), tmp.end());
	}
};

/// \private
template<>
struct type<::automy::basic::ImageF64> {
	void read(TypeInput& in, ::automy::basic::ImageF64& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::ImageF64& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::ImageF64& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::ImageF64& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::ImageF64& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		const std::vector<int> tmp = {22, 3, 10};
		code.insert(code.end(), tmp.begin(), tmp.end());
	}
};

/// \private
template<>
struct type<::automy::basic::ImageFrame> {
	void read(TypeInput& in, ::automy::basic::ImageFrame& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::ImageFrame& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::ImageFrame& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::ImageFrame& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::ImageFrame& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

/// \private
template<>
struct type<::automy::basic::ImageFrame16> {
	void read(TypeInput& in, ::automy::basic::ImageFrame16& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::ImageFrame16& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::ImageFrame16& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::ImageFrame16& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::ImageFrame16& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

/// \private
template<>
struct type<::automy::basic::ImageFrame32> {
	void read(TypeInput& in, ::automy::basic::ImageFrame32& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::ImageFrame32& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::ImageFrame32& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::ImageFrame32& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::ImageFrame32& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

/// \private
template<>
struct type<::automy::basic::ImageFrame8> {
	void read(TypeInput& in, ::automy::basic::ImageFrame8& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::ImageFrame8& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::ImageFrame8& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::ImageFrame8& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::ImageFrame8& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

/// \private
template<>
struct type<::automy::basic::ImageFrameF16> {
	void read(TypeInput& in, ::automy::basic::ImageFrameF16& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::ImageFrameF16& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::ImageFrameF16& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::ImageFrameF16& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::ImageFrameF16& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

/// \private
template<>
struct type<::automy::basic::ImageFrameF32> {
	void read(TypeInput& in, ::automy::basic::ImageFrameF32& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::ImageFrameF32& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::ImageFrameF32& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::ImageFrameF32& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::ImageFrameF32& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

/// \private
template<>
struct type<::automy::basic::ImageFrameF64> {
	void read(TypeInput& in, ::automy::basic::ImageFrameF64& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::ImageFrameF64& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::ImageFrameF64& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::ImageFrameF64& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::ImageFrameF64& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

/// \private
template<>
struct type<::automy::basic::MultiImageFrame> {
	void read(TypeInput& in, ::automy::basic::MultiImageFrame& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::MultiImageFrame& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::MultiImageFrame& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::MultiImageFrame& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::MultiImageFrame& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

/// \private
template<>
struct type<::automy::basic::Scalar> {
	void read(TypeInput& in, ::automy::basic::Scalar& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::Scalar& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::Scalar& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::Scalar& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::Scalar& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

/// \private
template<>
struct type<::automy::basic::Transform3D> {
	void read(TypeInput& in, ::automy::basic::Transform3D& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::Transform3D& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::Transform3D& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::Transform3D& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::Transform3D& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

/// \private
template<>
struct type<::automy::basic::TransformPublisherBase> {
	void read(TypeInput& in, ::automy::basic::TransformPublisherBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::TransformPublisherBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::TransformPublisherBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::TransformPublisherBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::TransformPublisherBase& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};

/// \private
template<>
struct type<::automy::basic::Trigger> {
	void read(TypeInput& in, ::automy::basic::Trigger& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::basic::Trigger& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::basic::Trigger& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::basic::Trigger& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::basic::Trigger& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};


} // namespace vnx

#endif // INCLUDE_automy_basic_PACKAGE_HXX_
