
// AUTO GENERATED by vnxcppcodegen

#include <automy/basic/package.hxx>
#include <automy/basic/TransformPublisherClient.hxx>
#include <automy/basic/Transform3D.hxx>
#include <automy/basic/TransformPublisher_set_transform.hxx>
#include <automy/basic/TransformPublisher_set_transform_return.hxx>
#include <vnx/Module.h>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/Object.hpp>

#include <vnx/vnx.h>


namespace automy {
namespace basic {

TransformPublisherClient::TransformPublisherClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

TransformPublisherClient::TransformPublisherClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

::vnx::TypeCode TransformPublisherClient::vnx_get_type_code() {
	auto _method = ::vnx::ModuleInterface_vnx_get_type_code::create();
	auto _return_value = vnx_request(_method);
	auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code_return>(_return_value);
	if(!_result) {
		throw std::logic_error("TransformPublisherClient: !_result");
	}
	return _result->_ret_0;
}

void TransformPublisherClient::set_transform(const std::shared_ptr<const ::automy::basic::Transform3D>& new_transform) {
	auto _method = ::automy::basic::TransformPublisher_set_transform::create();
	_method->new_transform = new_transform;
	auto _return_value = vnx_request(_method);
}

void TransformPublisherClient::set_transform_async(const std::shared_ptr<const ::automy::basic::Transform3D>& new_transform) {
	vnx_is_async = true;
	set_transform(new_transform);
}


} // namespace automy
} // namespace basic
