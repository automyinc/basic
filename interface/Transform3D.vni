package automy.basic;

import automy.math.Matrix4d;

class Transform3D {
	
	long time;						// posix timestamp [usec]
	
	string frame;					// child frame
	
	string parent;					// parent frame
	
	Matrix4d matrix;				// left multiplying transforms a point from 'frame' to 'parent'
	
	
	vnx.TopicPtr get_topic(string tf_domain) const;		// returns tf topic name based on 'tf_domain', 'frame' and 'parent'
	
	void transform(Transform3D* sample);		// apply a transformation to this one
	
	Transform3D* get_inverse() const;
	
	Matrix4d get_transform25() const;			// get corresponding 2.5D transformation
	
	/*
	 * Computes an interpolation between this and sample_1, at point t (0 to 1).
	 * Returns null in case interpolation is not supported.
	 */
	Transform3D* get_interpolated(Transform3D* sample_1, double t) const;
	
	/* 
	 * Reads an Object and creates a Transform3D out of it.
	 * It accepts different fields for easier setting of a transform:
	 * - "offset_xyz": X, Y, Z translation (after rotation) [m]
	 * - "rotation_rpy": intrinsic rotation, first yaw, then pitch, then roll [rad]
	 * - "rotation_rpy_deg": same as rotation_rpy but in [deg]
	 * - otherwise sets the matrix directly from "matrix" field
	 */
	static Transform3D* from_config(vnx.Object config);
	
}
